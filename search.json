[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "loan_data = pd.read_csv(\"../data/loan_data_2007_2014.csv\", low_memory=False)\n\n\nloan_data\n\n\n\n\n\n  \n    \n      \n      id\n      member_id\n      loan_amnt\n      funded_amnt\n      funded_amnt_inv\n      term\n      int_rate\n      installment\n      grade\n      sub_grade\n      emp_title\n      emp_length\n      home_ownership\n      annual_inc\n      verification_status\n      issue_d\n      loan_status\n      pymnt_plan\n      url\n      desc\n      purpose\n      title\n      zip_code\n      addr_state\n      dti\n      delinq_2yrs\n      earliest_cr_line\n      inq_last_6mths\n      mths_since_last_delinq\n      mths_since_last_record\n      open_acc\n      pub_rec\n      revol_bal\n      revol_util\n      total_acc\n      initial_list_status\n      out_prncp\n      out_prncp_inv\n      total_pymnt\n      total_pymnt_inv\n      total_rec_prncp\n      total_rec_int\n      total_rec_late_fee\n      recoveries\n      collection_recovery_fee\n      last_pymnt_d\n      last_pymnt_amnt\n      next_pymnt_d\n      last_credit_pull_d\n      collections_12_mths_ex_med\n      mths_since_last_major_derog\n      policy_code\n      application_type\n      annual_inc_joint\n      dti_joint\n      verification_status_joint\n      acc_now_delinq\n      tot_coll_amt\n      tot_cur_bal\n      open_acc_6m\n      open_il_6m\n      open_il_12m\n      open_il_24m\n      mths_since_rcnt_il\n      total_bal_il\n      il_util\n      open_rv_12m\n      open_rv_24m\n      max_bal_bc\n      all_util\n      total_rev_hi_lim\n      inq_fi\n      total_cu_tl\n      inq_last_12m\n    \n  \n  \n    \n      0\n      1077501\n      1296599\n      5000\n      5000\n      4975.0\n      36 months\n      10.65\n      162.87\n      B\n      B2\n      NaN\n      10+ years\n      RENT\n      24000.0\n      Verified\n      Dec-11\n      Fully Paid\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      Borrower added on 12/22/11 > I need to upgra...\n      credit_card\n      Computer\n      860xx\n      AZ\n      27.65\n      0.0\n      Jan-85\n      1.0\n      NaN\n      NaN\n      3.0\n      0.0\n      13648\n      83.7\n      9.0\n      f\n      0.00\n      0.00\n      5861.071414\n      5831.78\n      5000.00\n      861.07\n      0.00\n      0.00\n      0.00\n      Jan-15\n      171.62\n      NaN\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      1077430\n      1314167\n      2500\n      2500\n      2500.0\n      60 months\n      15.27\n      59.83\n      C\n      C4\n      Ryder\n      < 1 year\n      RENT\n      30000.0\n      Source Verified\n      Dec-11\n      Charged Off\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      Borrower added on 12/22/11 > I plan to use t...\n      car\n      bike\n      309xx\n      GA\n      1.00\n      0.0\n      Apr-99\n      5.0\n      NaN\n      NaN\n      3.0\n      0.0\n      1687\n      9.4\n      4.0\n      f\n      0.00\n      0.00\n      1008.710000\n      1008.71\n      456.46\n      435.17\n      0.00\n      117.08\n      1.11\n      Apr-13\n      119.66\n      NaN\n      Sep-13\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      1077175\n      1313524\n      2400\n      2400\n      2400.0\n      36 months\n      15.96\n      84.33\n      C\n      C5\n      NaN\n      10+ years\n      RENT\n      12252.0\n      Not Verified\n      Dec-11\n      Fully Paid\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      NaN\n      small_business\n      real estate business\n      606xx\n      IL\n      8.72\n      0.0\n      Nov-01\n      2.0\n      NaN\n      NaN\n      2.0\n      0.0\n      2956\n      98.5\n      10.0\n      f\n      0.00\n      0.00\n      3003.653644\n      3003.65\n      2400.00\n      603.65\n      0.00\n      0.00\n      0.00\n      Jun-14\n      649.91\n      NaN\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      1076863\n      1277178\n      10000\n      10000\n      10000.0\n      36 months\n      13.49\n      339.31\n      C\n      C1\n      AIR RESOURCES BOARD\n      10+ years\n      RENT\n      49200.0\n      Source Verified\n      Dec-11\n      Fully Paid\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      Borrower added on 12/21/11 > to pay for prop...\n      other\n      personel\n      917xx\n      CA\n      20.00\n      0.0\n      Feb-96\n      1.0\n      35.0\n      NaN\n      10.0\n      0.0\n      5598\n      21.0\n      37.0\n      f\n      0.00\n      0.00\n      12226.302210\n      12226.30\n      10000.00\n      2209.33\n      16.97\n      0.00\n      0.00\n      Jan-15\n      357.48\n      NaN\n      Jan-15\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      1075358\n      1311748\n      3000\n      3000\n      3000.0\n      60 months\n      12.69\n      67.79\n      B\n      B5\n      University Medical Group\n      1 year\n      RENT\n      80000.0\n      Source Verified\n      Dec-11\n      Current\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      Borrower added on 12/21/11 > I plan on combi...\n      other\n      Personal\n      972xx\n      OR\n      17.94\n      0.0\n      Jan-96\n      0.0\n      38.0\n      NaN\n      15.0\n      0.0\n      27783\n      53.9\n      38.0\n      f\n      766.90\n      766.90\n      3242.170000\n      3242.17\n      2233.10\n      1009.07\n      0.00\n      0.00\n      0.00\n      Jan-16\n      67.79\n      Feb-16\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      466280\n      8598660\n      1440975\n      18400\n      18400\n      18400.0\n      60 months\n      14.47\n      432.64\n      C\n      C2\n      Financial Advisor\n      4 years\n      MORTGAGE\n      110000.0\n      Source Verified\n      Jan-14\n      Current\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      NaN\n      debt_consolidation\n      Debt consolidation\n      773xx\n      TX\n      19.85\n      0.0\n      Apr-03\n      2.0\n      NaN\n      NaN\n      18.0\n      0.0\n      23208\n      77.6\n      36.0\n      w\n      12574.00\n      12574.00\n      10383.360000\n      10383.36\n      5826.00\n      4557.36\n      0.00\n      0.00\n      0.00\n      Jan-16\n      432.64\n      Feb-16\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      0.0\n      294998.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      29900.0\n      NaN\n      NaN\n      NaN\n    \n    \n      466281\n      9684700\n      11536848\n      22000\n      22000\n      22000.0\n      60 months\n      19.97\n      582.50\n      D\n      D5\n      Chief of Interpretation (Park Ranger)\n      10+ years\n      MORTGAGE\n      78000.0\n      Verified\n      Jan-14\n      Charged Off\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      NaN\n      debt_consolidation\n      Debt consolidation\n      377xx\n      TN\n      18.45\n      0.0\n      Jun-97\n      5.0\n      NaN\n      116.0\n      18.0\n      1.0\n      18238\n      46.3\n      30.0\n      f\n      0.00\n      0.00\n      4677.920000\n      4677.92\n      1837.04\n      2840.88\n      0.00\n      0.00\n      0.00\n      Dec-14\n      17.50\n      NaN\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      0.0\n      221830.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      39400.0\n      NaN\n      NaN\n      NaN\n    \n    \n      466282\n      9584776\n      11436914\n      20700\n      20700\n      20700.0\n      60 months\n      16.99\n      514.34\n      D\n      D1\n      patrol\n      7 years\n      MORTGAGE\n      46000.0\n      Verified\n      Jan-14\n      Current\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      Borrower added on 12/06/13 > I am going to c...\n      debt_consolidation\n      Debt consolidation\n      458xx\n      OH\n      25.65\n      0.0\n      Dec-01\n      2.0\n      65.0\n      NaN\n      18.0\n      0.0\n      6688\n      51.1\n      43.0\n      f\n      14428.31\n      14428.31\n      12343.980000\n      12343.98\n      6271.69\n      6072.29\n      0.00\n      0.00\n      0.00\n      Jan-16\n      514.34\n      Feb-16\n      Dec-15\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      0.0\n      73598.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      13100.0\n      NaN\n      NaN\n      NaN\n    \n    \n      466283\n      9604874\n      11457002\n      2000\n      2000\n      2000.0\n      36 months\n      7.90\n      62.59\n      A\n      A4\n      Server Engineer Lead\n      3 years\n      OWN\n      83000.0\n      Verified\n      Jan-14\n      Fully Paid\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      NaN\n      credit_card\n      Credit card refinancing\n      913xx\n      CA\n      5.39\n      3.0\n      Feb-03\n      1.0\n      13.0\n      NaN\n      21.0\n      0.0\n      11404\n      21.5\n      27.0\n      w\n      0.00\n      0.00\n      2126.579838\n      2126.58\n      2000.00\n      126.58\n      0.00\n      0.00\n      0.00\n      Dec-14\n      1500.68\n      NaN\n      Apr-15\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      0.0\n      591610.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      53100.0\n      NaN\n      NaN\n      NaN\n    \n    \n      466284\n      9199665\n      11061576\n      10000\n      10000\n      9975.0\n      36 months\n      19.20\n      367.58\n      D\n      D3\n      NaN\n      10+ years\n      MORTGAGE\n      46000.0\n      Verified\n      Jan-14\n      Current\n      n\n      https://www.lendingclub.com/browse/loanDetail....\n      Borrower added on 12/04/13 > I will like a l...\n      other\n      Other\n      950xx\n      CA\n      22.78\n      1.0\n      Feb-00\n      0.0\n      9.0\n      NaN\n      6.0\n      0.0\n      11325\n      70.8\n      22.0\n      f\n      3984.38\n      3974.41\n      8821.620000\n      8799.57\n      6015.62\n      2806.00\n      0.00\n      0.00\n      0.00\n      Jan-16\n      367.58\n      Feb-16\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      NaN\n      NaN\n      NaN\n      0.0\n      0.0\n      57477.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      16000.0\n      NaN\n      NaN\n      NaN\n    \n  \n\n466285 rows × 74 columns\n\n\n\n\n# drop columns with more than 80% null values\nloan_data = loan_data.dropna(thresh=loan_data.shape[0] * 0.2, how=\"all\", axis=1)\n\n\nloan_data.shape\n\n(466285, 56)\n\n\n\n# drop all redundant and forward-looking columns\nloan_data = loan_data.drop(\n    columns=[\n        \"id\",\n        \"member_id\",\n        \"sub_grade\",\n        \"emp_title\",\n        \"url\",\n        \"desc\",\n        \"title\",\n        \"zip_code\",\n        \"next_pymnt_d\",\n        \"recoveries\",\n        \"collection_recovery_fee\",\n        \"total_rec_prncp\",\n        \"total_rec_late_fee\",\n    ]\n)\n\n\nloan_data.shape\n\n(466285, 43)\n\n\n\n# explore the unique values in loan_status column\nloan_data[\"loan_status\"].value_counts(normalize=True)\n\nCurrent                                                0.480878\nFully Paid                                             0.396193\nCharged Off                                            0.091092\nLate (31-120 days)                                     0.014798\nIn Grace Period                                        0.006747\nDoes not meet the credit policy. Status:Fully Paid     0.004263\nLate (16-30 days)                                      0.002612\nDefault                                                0.001784\nDoes not meet the credit policy. Status:Charged Off    0.001632\nName: loan_status, dtype: float64\n\n\n\n# create a new column based on the loan_status column that will be our target variable\ndefault_columns = [\n    \"Charged Off\",\n    \"Default\",\n    \"Late (31-120 days)\",\n    \"Does not meet the credit policy. Status:Charged Off\",\n]\nloan_data[\"good_bad\"] = np.where(loan_data.loc[:, \"loan_status\"].isin(default_columns), 0, 1)\n\n\nloan_data\n\n\n\n\n\n  \n    \n      \n      loan_amnt\n      funded_amnt\n      funded_amnt_inv\n      term\n      int_rate\n      installment\n      grade\n      emp_length\n      home_ownership\n      annual_inc\n      verification_status\n      issue_d\n      loan_status\n      pymnt_plan\n      purpose\n      addr_state\n      dti\n      delinq_2yrs\n      earliest_cr_line\n      inq_last_6mths\n      mths_since_last_delinq\n      open_acc\n      pub_rec\n      revol_bal\n      revol_util\n      total_acc\n      initial_list_status\n      out_prncp\n      out_prncp_inv\n      total_pymnt\n      total_pymnt_inv\n      total_rec_int\n      last_pymnt_d\n      last_pymnt_amnt\n      last_credit_pull_d\n      collections_12_mths_ex_med\n      mths_since_last_major_derog\n      policy_code\n      application_type\n      acc_now_delinq\n      tot_coll_amt\n      tot_cur_bal\n      total_rev_hi_lim\n      good_bad\n    \n  \n  \n    \n      0\n      5000\n      5000\n      4975.0\n      36 months\n      10.65\n      162.87\n      B\n      10+ years\n      RENT\n      24000.0\n      Verified\n      Dec-11\n      Fully Paid\n      n\n      credit_card\n      AZ\n      27.65\n      0.0\n      Jan-85\n      1.0\n      NaN\n      3.0\n      0.0\n      13648\n      83.7\n      9.0\n      f\n      0.00\n      0.00\n      5861.071414\n      5831.78\n      861.07\n      Jan-15\n      171.62\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      NaN\n      NaN\n      NaN\n      1\n    \n    \n      1\n      2500\n      2500\n      2500.0\n      60 months\n      15.27\n      59.83\n      C\n      < 1 year\n      RENT\n      30000.0\n      Source Verified\n      Dec-11\n      Charged Off\n      n\n      car\n      GA\n      1.00\n      0.0\n      Apr-99\n      5.0\n      NaN\n      3.0\n      0.0\n      1687\n      9.4\n      4.0\n      f\n      0.00\n      0.00\n      1008.710000\n      1008.71\n      435.17\n      Apr-13\n      119.66\n      Sep-13\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      NaN\n      NaN\n      NaN\n      0\n    \n    \n      2\n      2400\n      2400\n      2400.0\n      36 months\n      15.96\n      84.33\n      C\n      10+ years\n      RENT\n      12252.0\n      Not Verified\n      Dec-11\n      Fully Paid\n      n\n      small_business\n      IL\n      8.72\n      0.0\n      Nov-01\n      2.0\n      NaN\n      2.0\n      0.0\n      2956\n      98.5\n      10.0\n      f\n      0.00\n      0.00\n      3003.653644\n      3003.65\n      603.65\n      Jun-14\n      649.91\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      NaN\n      NaN\n      NaN\n      1\n    \n    \n      3\n      10000\n      10000\n      10000.0\n      36 months\n      13.49\n      339.31\n      C\n      10+ years\n      RENT\n      49200.0\n      Source Verified\n      Dec-11\n      Fully Paid\n      n\n      other\n      CA\n      20.00\n      0.0\n      Feb-96\n      1.0\n      35.0\n      10.0\n      0.0\n      5598\n      21.0\n      37.0\n      f\n      0.00\n      0.00\n      12226.302210\n      12226.30\n      2209.33\n      Jan-15\n      357.48\n      Jan-15\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      NaN\n      NaN\n      NaN\n      1\n    \n    \n      4\n      3000\n      3000\n      3000.0\n      60 months\n      12.69\n      67.79\n      B\n      1 year\n      RENT\n      80000.0\n      Source Verified\n      Dec-11\n      Current\n      n\n      other\n      OR\n      17.94\n      0.0\n      Jan-96\n      0.0\n      38.0\n      15.0\n      0.0\n      27783\n      53.9\n      38.0\n      f\n      766.90\n      766.90\n      3242.170000\n      3242.17\n      1009.07\n      Jan-16\n      67.79\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      NaN\n      NaN\n      NaN\n      1\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      466280\n      18400\n      18400\n      18400.0\n      60 months\n      14.47\n      432.64\n      C\n      4 years\n      MORTGAGE\n      110000.0\n      Source Verified\n      Jan-14\n      Current\n      n\n      debt_consolidation\n      TX\n      19.85\n      0.0\n      Apr-03\n      2.0\n      NaN\n      18.0\n      0.0\n      23208\n      77.6\n      36.0\n      w\n      12574.00\n      12574.00\n      10383.360000\n      10383.36\n      4557.36\n      Jan-16\n      432.64\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      294998.0\n      29900.0\n      1\n    \n    \n      466281\n      22000\n      22000\n      22000.0\n      60 months\n      19.97\n      582.50\n      D\n      10+ years\n      MORTGAGE\n      78000.0\n      Verified\n      Jan-14\n      Charged Off\n      n\n      debt_consolidation\n      TN\n      18.45\n      0.0\n      Jun-97\n      5.0\n      NaN\n      18.0\n      1.0\n      18238\n      46.3\n      30.0\n      f\n      0.00\n      0.00\n      4677.920000\n      4677.92\n      2840.88\n      Dec-14\n      17.50\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      221830.0\n      39400.0\n      0\n    \n    \n      466282\n      20700\n      20700\n      20700.0\n      60 months\n      16.99\n      514.34\n      D\n      7 years\n      MORTGAGE\n      46000.0\n      Verified\n      Jan-14\n      Current\n      n\n      debt_consolidation\n      OH\n      25.65\n      0.0\n      Dec-01\n      2.0\n      65.0\n      18.0\n      0.0\n      6688\n      51.1\n      43.0\n      f\n      14428.31\n      14428.31\n      12343.980000\n      12343.98\n      6072.29\n      Jan-16\n      514.34\n      Dec-15\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      73598.0\n      13100.0\n      1\n    \n    \n      466283\n      2000\n      2000\n      2000.0\n      36 months\n      7.90\n      62.59\n      A\n      3 years\n      OWN\n      83000.0\n      Verified\n      Jan-14\n      Fully Paid\n      n\n      credit_card\n      CA\n      5.39\n      3.0\n      Feb-03\n      1.0\n      13.0\n      21.0\n      0.0\n      11404\n      21.5\n      27.0\n      w\n      0.00\n      0.00\n      2126.579838\n      2126.58\n      126.58\n      Dec-14\n      1500.68\n      Apr-15\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      591610.0\n      53100.0\n      1\n    \n    \n      466284\n      10000\n      10000\n      9975.0\n      36 months\n      19.20\n      367.58\n      D\n      10+ years\n      MORTGAGE\n      46000.0\n      Verified\n      Jan-14\n      Current\n      n\n      other\n      CA\n      22.78\n      1.0\n      Feb-00\n      0.0\n      9.0\n      6.0\n      0.0\n      11325\n      70.8\n      22.0\n      f\n      3984.38\n      3974.41\n      8821.620000\n      8799.57\n      2806.00\n      Jan-16\n      367.58\n      Jan-16\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      57477.0\n      16000.0\n      1\n    \n  \n\n466285 rows × 44 columns\n\n\n\n\n# Drop the original 'loan_status' column\nloan_data = loan_data.drop(columns=[\"loan_status\"])\n\n\n# split data into 80/20 while keeping the distribution of bad loans in test set same as that in the pre-split dataset\nX = loan_data.drop(\"good_bad\", axis=1)\ny = loan_data[\"good_bad\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n\nHard copy the X datasets to avoid Pandas’ SetttingWithCopyWarning when we play around with this data later on. This is currently an open issue between Pandas and Scikit-Learn teams\n\nX_train, X_test = X_train.copy(), X_test.copy()\n\n\nprint(X_train.shape, y_train.shape)\n\n(373028, 42) (373028,)\n\n\nFunction to clean up the emp_length column, assign 0 to NANs, and convert to numeric\n\ndef emp_length_converter(df, column):\n    df[column] = df[column].str.replace(\"\\+ years\", \"\")\n    df[column] = df[column].str.replace(\"< 1 year\", str(0))\n    df[column] = df[column].str.replace(\" years\", \"\")\n    df[column] = df[column].str.replace(\" year\", \"\")\n    df[column] = pd.to_numeric(df[column])\n    df[column].fillna(value=0, inplace=True)\n    return df\n\nFunction to convert date columns to datetime format and create a new column as a difference between today and the respective date\n\ndef date_columns(df, column):\n    today_date = pd.to_datetime(\"2020-08-01\")  # store current month\n    df[column] = pd.to_datetime(df[column], format=\"%b-%y\")  # convert to datetime format\n    # calculate the difference in months and add to a new column\n    df[f\"mths_since_{column}\"] = round(pd.to_numeric((today_date - df[column]) / np.timedelta64(1, \"M\")))\n    # make any resulting -ve values to be equal to the max date\n    df[f\"mths_since_{column}\"] = df[f\"mths_since_{column}\"].apply(\n        lambda x: df[f\"mths_since_{column}\"].max() if x < 0 else x\n    )\n    df = df.drop(columns=[column])  # drop the original date column\n    return df\n\n\n# function to remove 'months' string from the 'term' column and convert it to numeric\ndef loan_term_converter(df, column):\n    df[column] = pd.to_numeric(df[column].str.replace(\" months\", \"\"))\n    return df\n\n\n# apply these functions to X_train\nX_train = date_columns(X_train, \"earliest_cr_line\")\nX_train = date_columns(X_train, \"issue_d\")\nX_train = date_columns(X_train, \"last_pymnt_d\")\nX_train = date_columns(X_train, \"last_credit_pull_d\")\nX_train = emp_length_converter(X_train, \"emp_length\")\nX_train = loan_term_converter(X_train, \"term\")\n\n/var/folders/qz/3pl78vgn6t7cltx35ttht03r0000gn/T/ipykernel_18263/1071858157.py:2: FutureWarning: The default value of regex will change from True to False in a future version.\n  df[column] = df[column].str.replace(\"\\+ years\", \"\")\n\n\n\nX_train\n\n\n\n\n\n  \n    \n      \n      loan_amnt\n      funded_amnt\n      funded_amnt_inv\n      term\n      int_rate\n      installment\n      grade\n      emp_length\n      home_ownership\n      annual_inc\n      verification_status\n      pymnt_plan\n      purpose\n      addr_state\n      dti\n      delinq_2yrs\n      inq_last_6mths\n      mths_since_last_delinq\n      open_acc\n      pub_rec\n      revol_bal\n      revol_util\n      total_acc\n      initial_list_status\n      out_prncp\n      out_prncp_inv\n      total_pymnt\n      total_pymnt_inv\n      total_rec_int\n      last_pymnt_amnt\n      collections_12_mths_ex_med\n      mths_since_last_major_derog\n      policy_code\n      application_type\n      acc_now_delinq\n      tot_coll_amt\n      tot_cur_bal\n      total_rev_hi_lim\n      mths_since_earliest_cr_line\n      mths_since_issue_d\n      mths_since_last_pymnt_d\n      mths_since_last_credit_pull_d\n    \n  \n  \n    \n      456615\n      15000\n      15000\n      15000.0\n      36\n      8.90\n      476.30\n      A\n      7.0\n      MORTGAGE\n      80000.0\n      Source Verified\n      n\n      credit_card\n      WI\n      17.01\n      1.0\n      0.0\n      20.0\n      19.0\n      0.0\n      20699\n      59.0\n      32.0\n      w\n      0.00\n      0.00\n      16561.02000\n      16561.02\n      1561.02\n      8940.22\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      143586.0\n      35100.0\n      296.0\n      79.0\n      62.0\n      55.0\n    \n    \n      451541\n      8000\n      8000\n      8000.0\n      60\n      18.25\n      204.24\n      D\n      10.0\n      OWN\n      44000.0\n      Verified\n      n\n      other\n      TN\n      23.46\n      0.0\n      1.0\n      NaN\n      12.0\n      0.0\n      13245\n      32.1\n      25.0\n      f\n      5746.54\n      5746.54\n      4697.52000\n      4697.52\n      2444.06\n      204.24\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      180443.0\n      41300.0\n      301.0\n      79.0\n      55.0\n      55.0\n    \n    \n      394474\n      12150\n      12150\n      12100.0\n      60\n      18.92\n      314.65\n      D\n      3.0\n      OWN\n      27000.0\n      Source Verified\n      n\n      credit_card\n      TN\n      31.07\n      1.0\n      0.0\n      10.0\n      9.0\n      0.0\n      7172\n      73.2\n      22.0\n      f\n      9282.24\n      9244.04\n      6293.00000\n      6267.10\n      3425.24\n      314.65\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      34197.0\n      9800.0\n      359.0\n      75.0\n      55.0\n      55.0\n    \n    \n      110294\n      10000\n      10000\n      10000.0\n      36\n      6.03\n      304.36\n      A\n      3.0\n      MORTGAGE\n      33000.0\n      Not Verified\n      n\n      debt_consolidation\n      TN\n      9.16\n      0.0\n      0.0\n      NaN\n      5.0\n      0.0\n      2138\n      21.2\n      17.0\n      w\n      0.00\n      0.00\n      10858.01000\n      10858.01\n      858.01\n      3553.37\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      77959.0\n      10100.0\n      224.0\n      84.0\n      59.0\n      59.0\n    \n    \n      139343\n      15825\n      15825\n      15825.0\n      36\n      12.12\n      526.53\n      B\n      10.0\n      MORTGAGE\n      59000.0\n      Verified\n      n\n      debt_consolidation\n      WA\n      17.94\n      0.0\n      0.0\n      NaN\n      7.0\n      0.0\n      30326\n      93.6\n      31.0\n      f\n      0.00\n      0.00\n      4736.52000\n      4736.52\n      1301.35\n      526.53\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      187370.0\n      32400.0\n      494.0\n      87.0\n      78.0\n      55.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      163633\n      22800\n      22800\n      22800.0\n      60\n      16.29\n      557.98\n      C\n      10.0\n      MORTGAGE\n      85000.0\n      Verified\n      n\n      debt_consolidation\n      CA\n      15.12\n      0.0\n      0.0\n      38.0\n      15.0\n      0.0\n      18556\n      67.5\n      22.0\n      f\n      12158.37\n      12158.37\n      18968.20000\n      18968.20\n      8326.57\n      557.98\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      29071.0\n      27500.0\n      253.0\n      90.0\n      55.0\n      55.0\n    \n    \n      399306\n      20275\n      20275\n      20175.0\n      36\n      12.49\n      678.18\n      B\n      7.0\n      MORTGAGE\n      48000.0\n      Verified\n      n\n      credit_card\n      KS\n      22.70\n      0.0\n      0.0\n      NaN\n      7.0\n      0.0\n      33997\n      75.0\n      20.0\n      w\n      9947.82\n      9898.75\n      13563.60000\n      13496.70\n      3236.42\n      678.18\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      186530.0\n      45300.0\n      230.0\n      75.0\n      55.0\n      55.0\n    \n    \n      57787\n      25000\n      25000\n      24975.0\n      60\n      14.30\n      585.61\n      C\n      0.0\n      MORTGAGE\n      65530.0\n      Verified\n      n\n      debt_consolidation\n      CO\n      22.91\n      0.0\n      0.0\n      NaN\n      8.0\n      0.0\n      11848\n      68.1\n      24.0\n      f\n      0.00\n      0.00\n      30285.29598\n      30255.01\n      5285.30\n      19162.85\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      290599.0\n      17400.0\n      314.0\n      81.0\n      60.0\n      56.0\n    \n    \n      81641\n      10000\n      10000\n      10000.0\n      36\n      15.10\n      347.15\n      C\n      4.0\n      MORTGAGE\n      50000.0\n      Not Verified\n      n\n      debt_consolidation\n      FL\n      14.24\n      1.0\n      1.0\n      10.0\n      7.0\n      0.0\n      9693\n      65.1\n      9.0\n      w\n      2936.24\n      2936.24\n      9373.05000\n      9373.05\n      2309.29\n      347.15\n      0.0\n      40.0\n      1\n      INDIVIDUAL\n      0.0\n      0.0\n      27715.0\n      14900.0\n      156.0\n      82.0\n      55.0\n      55.0\n    \n    \n      38736\n      7500\n      7500\n      0.0\n      36\n      10.08\n      242.29\n      B\n      7.0\n      MORTGAGE\n      50000.0\n      Not Verified\n      n\n      debt_consolidation\n      CA\n      2.93\n      0.0\n      3.0\n      NaN\n      5.0\n      0.0\n      8453\n      77.6\n      17.0\n      f\n      0.00\n      0.00\n      4848.62000\n      0.00\n      999.22\n      200.02\n      0.0\n      NaN\n      1\n      INDIVIDUAL\n      0.0\n      NaN\n      NaN\n      NaN\n      204.0\n      147.0\n      125.0\n      121.0\n    \n  \n\n373028 rows × 42 columns\n\n\n\n\nprint(X_train.shape, y_train.shape)\n\n(373028, 42) (373028,)\n\n\n\n# first divide training data into categorical and numerical subsets\nX_train_cat = X_train.select_dtypes(include=\"object\").copy()\nX_train_num = X_train.select_dtypes(include=\"number\").copy()\n\n\nchi2_check = {}  # define an empty dictionary to store chi-squared test results\n# loop over each column in the training set to calculate chi-statistic with the target variable\nfor column in X_train_cat:\n    chi, p, dof, ex = chi2_contingency(pd.crosstab(y_train, X_train_cat[column]))\n    chi2_check.setdefault(\"Feature\", []).append(column)\n    chi2_check.setdefault(\"p-value\", []).append(round(p, 10))\nchi2_result = pd.DataFrame(data=chi2_check)  # convert the dictionary to a DF\nchi2_result.sort_values(by=[\"p-value\"], ascending=True, ignore_index=True, inplace=True)\n\n\nchi2_result\n\n\n\n\n\n  \n    \n      \n      Feature\n      p-value\n    \n  \n  \n    \n      0\n      grade\n      0.000000\n    \n    \n      1\n      home_ownership\n      0.000000\n    \n    \n      2\n      verification_status\n      0.000000\n    \n    \n      3\n      purpose\n      0.000000\n    \n    \n      4\n      addr_state\n      0.000000\n    \n    \n      5\n      initial_list_status\n      0.000000\n    \n    \n      6\n      pymnt_plan\n      0.000923\n    \n    \n      7\n      application_type\n      1.000000\n    \n  \n\n\n\n\n\n# since f_class_if does not accept missing values, we will do a very crude imputation of missing values\nX_train_num.fillna(X_train_num.mean(), inplace=True)\n\n# Calculate F Statistic and corresponding p values\nF_statistic, p_values = f_classif(X_train_num, y_train)\n\n# convert to a DF\nANOVA_F_table = pd.DataFrame(\n    data={\n        \"Numerical_Feature\": X_train_num.columns.values,\n        \"F-Score\": F_statistic,\n        \"p values\": p_values.round(decimals=10),\n    }\n)\nANOVA_F_table = ANOVA_F_table.sort_values(by=[\"F-Score\"], ascending=False, ignore_index=True)\n\n# save the top 20 numerical features in a list\ntop_num_features = ANOVA_F_table.iloc[:20, 0].to_list()\n\n# calculate pair-wise correlations between them\ncorrmat = X_train_num[top_num_features].corr()\nplt.figure(figsize=(10, 10))\nsns.heatmap(corrmat)\n\n/Users/henrydashwood/.pyenv/versions/3.10.3/envs/py3103/lib/python3.10/site-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [25] are constant.\n  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n/Users/henrydashwood/.pyenv/versions/3.10.3/envs/py3103/lib/python3.10/site-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in true_divide\n  f = msb / msw\n\n\n<AxesSubplot:>\n\n\n\n\n\n\n# save the names of columns to be dropped in a list\ndrop_columns_list = ANOVA_F_table.iloc[20:, 0].to_list()\ndrop_columns_list.extend(chi2_result.iloc[4:, 0].to_list())\ndrop_columns_list.extend([\"out_prncp_inv\", \"total_pymnt_inv\"])\n\n# function to drop these columns\ndef col_to_drop(df, columns_list):\n    df = df.drop(columns=columns_list)\n    return df\n\n\n# apply to X_train\nX_train = col_to_drop(X_train, drop_columns_list)\n\n\nX_train\n\n\n\n\n\n  \n    \n      \n      term\n      int_rate\n      grade\n      emp_length\n      home_ownership\n      annual_inc\n      verification_status\n      purpose\n      dti\n      inq_last_6mths\n      revol_util\n      total_acc\n      out_prncp\n      total_pymnt\n      total_rec_int\n      last_pymnt_amnt\n      tot_cur_bal\n      total_rev_hi_lim\n      mths_since_earliest_cr_line\n      mths_since_issue_d\n      mths_since_last_pymnt_d\n      mths_since_last_credit_pull_d\n    \n  \n  \n    \n      456615\n      36\n      8.90\n      A\n      7.0\n      MORTGAGE\n      80000.0\n      Source Verified\n      credit_card\n      17.01\n      0.0\n      59.0\n      32.0\n      0.00\n      16561.02000\n      1561.02\n      8940.22\n      143586.0\n      35100.0\n      296.0\n      79.0\n      62.0\n      55.0\n    \n    \n      451541\n      60\n      18.25\n      D\n      10.0\n      OWN\n      44000.0\n      Verified\n      other\n      23.46\n      1.0\n      32.1\n      25.0\n      5746.54\n      4697.52000\n      2444.06\n      204.24\n      180443.0\n      41300.0\n      301.0\n      79.0\n      55.0\n      55.0\n    \n    \n      394474\n      60\n      18.92\n      D\n      3.0\n      OWN\n      27000.0\n      Source Verified\n      credit_card\n      31.07\n      0.0\n      73.2\n      22.0\n      9282.24\n      6293.00000\n      3425.24\n      314.65\n      34197.0\n      9800.0\n      359.0\n      75.0\n      55.0\n      55.0\n    \n    \n      110294\n      36\n      6.03\n      A\n      3.0\n      MORTGAGE\n      33000.0\n      Not Verified\n      debt_consolidation\n      9.16\n      0.0\n      21.2\n      17.0\n      0.00\n      10858.01000\n      858.01\n      3553.37\n      77959.0\n      10100.0\n      224.0\n      84.0\n      59.0\n      59.0\n    \n    \n      139343\n      36\n      12.12\n      B\n      10.0\n      MORTGAGE\n      59000.0\n      Verified\n      debt_consolidation\n      17.94\n      0.0\n      93.6\n      31.0\n      0.00\n      4736.52000\n      1301.35\n      526.53\n      187370.0\n      32400.0\n      494.0\n      87.0\n      78.0\n      55.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      163633\n      60\n      16.29\n      C\n      10.0\n      MORTGAGE\n      85000.0\n      Verified\n      debt_consolidation\n      15.12\n      0.0\n      67.5\n      22.0\n      12158.37\n      18968.20000\n      8326.57\n      557.98\n      29071.0\n      27500.0\n      253.0\n      90.0\n      55.0\n      55.0\n    \n    \n      399306\n      36\n      12.49\n      B\n      7.0\n      MORTGAGE\n      48000.0\n      Verified\n      credit_card\n      22.70\n      0.0\n      75.0\n      20.0\n      9947.82\n      13563.60000\n      3236.42\n      678.18\n      186530.0\n      45300.0\n      230.0\n      75.0\n      55.0\n      55.0\n    \n    \n      57787\n      60\n      14.30\n      C\n      0.0\n      MORTGAGE\n      65530.0\n      Verified\n      debt_consolidation\n      22.91\n      0.0\n      68.1\n      24.0\n      0.00\n      30285.29598\n      5285.30\n      19162.85\n      290599.0\n      17400.0\n      314.0\n      81.0\n      60.0\n      56.0\n    \n    \n      81641\n      36\n      15.10\n      C\n      4.0\n      MORTGAGE\n      50000.0\n      Not Verified\n      debt_consolidation\n      14.24\n      1.0\n      65.1\n      9.0\n      2936.24\n      9373.05000\n      2309.29\n      347.15\n      27715.0\n      14900.0\n      156.0\n      82.0\n      55.0\n      55.0\n    \n    \n      38736\n      36\n      10.08\n      B\n      7.0\n      MORTGAGE\n      50000.0\n      Not Verified\n      debt_consolidation\n      2.93\n      3.0\n      77.6\n      17.0\n      0.00\n      4848.62000\n      999.22\n      200.02\n      NaN\n      NaN\n      204.0\n      147.0\n      125.0\n      121.0\n    \n  \n\n373028 rows × 22 columns\n\n\n\n\nprint(X_train.shape, y_train.shape)\n\n(373028, 22) (373028,)\n\n\n\n# function to create dummy variables\ndef dummy_creation(df, columns_list):\n    df_dummies = []\n    for col in columns_list:\n        df_dummies.append(pd.get_dummies(df[col], prefix=col, prefix_sep=\":\"))\n    df_dummies = pd.concat(df_dummies, axis=1)\n    df = pd.concat([df, df_dummies], axis=1)\n    return df\n\n\n# apply to our final four categorical variables\nX_train = dummy_creation(X_train, [\"grade\", \"home_ownership\", \"verification_status\", \"purpose\"])\n\n(373028, 22)\n1\n2\n3\n4\n(373028, 29)\n(373028, 51)\n\n\n\nprint(X_train.shape, y_train.shape)\n\n(373028, 51) (373028,)\n\n\n\n# update the test data with all functions defined so far\nX_test = emp_length_converter(X_test, \"emp_length\")\nX_test = date_columns(X_test, \"earliest_cr_line\")\nX_test = date_columns(X_test, \"issue_d\")\nX_test = date_columns(X_test, \"last_pymnt_d\")\nX_test = date_columns(X_test, \"last_credit_pull_d\")\nX_test = loan_term_converter(X_test, \"term\")\nX_test = col_to_drop(X_test, drop_columns_list)\n\n/var/folders/qz/3pl78vgn6t7cltx35ttht03r0000gn/T/ipykernel_18263/1071858157.py:2: FutureWarning: The default value of regex will change from True to False in a future version.\n  df[column] = df[column].str.replace(\"\\+ years\", \"\")\n\n\n\nX_test = dummy_creation(X_test, [\"grade\", \"home_ownership\", \"verification_status\", \"purpose\"])\n# reindex the dummied test set variables to make sure all the feature columns in the training set are also available in the test set\nX_test = X_test.reindex(labels=X_train.columns, axis=1, fill_value=0)\n\n(93257, 22)\n1\n2\n3\n4\n(93257, 30)\n(93257, 52)\n\n\n\nX_train\n\n\n\n\n\n  \n    \n      \n      term\n      int_rate\n      grade\n      emp_length\n      home_ownership\n      annual_inc\n      verification_status\n      purpose\n      dti\n      inq_last_6mths\n      revol_util\n      total_acc\n      out_prncp\n      total_pymnt\n      total_rec_int\n      last_pymnt_amnt\n      tot_cur_bal\n      total_rev_hi_lim\n      mths_since_earliest_cr_line\n      mths_since_issue_d\n      mths_since_last_pymnt_d\n      mths_since_last_credit_pull_d\n      grade:A\n      grade:B\n      grade:C\n      grade:D\n      grade:E\n      grade:F\n      grade:G\n      home_ownership:MORTGAGE\n      home_ownership:NONE\n      home_ownership:OTHER\n      home_ownership:OWN\n      home_ownership:RENT\n      verification_status:Not Verified\n      verification_status:Source Verified\n      verification_status:Verified\n      purpose:car\n      purpose:credit_card\n      purpose:debt_consolidation\n      purpose:educational\n      purpose:home_improvement\n      purpose:house\n      purpose:major_purchase\n      purpose:medical\n      purpose:moving\n      purpose:other\n      purpose:renewable_energy\n      purpose:small_business\n      purpose:vacation\n      purpose:wedding\n    \n  \n  \n    \n      456615\n      36\n      8.90\n      A\n      7.0\n      MORTGAGE\n      80000.0\n      Source Verified\n      credit_card\n      17.01\n      0.0\n      59.0\n      32.0\n      0.00\n      16561.02000\n      1561.02\n      8940.22\n      143586.0\n      35100.0\n      296.0\n      79.0\n      62.0\n      55.0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      451541\n      60\n      18.25\n      D\n      10.0\n      OWN\n      44000.0\n      Verified\n      other\n      23.46\n      1.0\n      32.1\n      25.0\n      5746.54\n      4697.52000\n      2444.06\n      204.24\n      180443.0\n      41300.0\n      301.0\n      79.0\n      55.0\n      55.0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n    \n    \n      394474\n      60\n      18.92\n      D\n      3.0\n      OWN\n      27000.0\n      Source Verified\n      credit_card\n      31.07\n      0.0\n      73.2\n      22.0\n      9282.24\n      6293.00000\n      3425.24\n      314.65\n      34197.0\n      9800.0\n      359.0\n      75.0\n      55.0\n      55.0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      1\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      110294\n      36\n      6.03\n      A\n      3.0\n      MORTGAGE\n      33000.0\n      Not Verified\n      debt_consolidation\n      9.16\n      0.0\n      21.2\n      17.0\n      0.00\n      10858.01000\n      858.01\n      3553.37\n      77959.0\n      10100.0\n      224.0\n      84.0\n      59.0\n      59.0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      139343\n      36\n      12.12\n      B\n      10.0\n      MORTGAGE\n      59000.0\n      Verified\n      debt_consolidation\n      17.94\n      0.0\n      93.6\n      31.0\n      0.00\n      4736.52000\n      1301.35\n      526.53\n      187370.0\n      32400.0\n      494.0\n      87.0\n      78.0\n      55.0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      163633\n      60\n      16.29\n      C\n      10.0\n      MORTGAGE\n      85000.0\n      Verified\n      debt_consolidation\n      15.12\n      0.0\n      67.5\n      22.0\n      12158.37\n      18968.20000\n      8326.57\n      557.98\n      29071.0\n      27500.0\n      253.0\n      90.0\n      55.0\n      55.0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      399306\n      36\n      12.49\n      B\n      7.0\n      MORTGAGE\n      48000.0\n      Verified\n      credit_card\n      22.70\n      0.0\n      75.0\n      20.0\n      9947.82\n      13563.60000\n      3236.42\n      678.18\n      186530.0\n      45300.0\n      230.0\n      75.0\n      55.0\n      55.0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      57787\n      60\n      14.30\n      C\n      0.0\n      MORTGAGE\n      65530.0\n      Verified\n      debt_consolidation\n      22.91\n      0.0\n      68.1\n      24.0\n      0.00\n      30285.29598\n      5285.30\n      19162.85\n      290599.0\n      17400.0\n      314.0\n      81.0\n      60.0\n      56.0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      81641\n      36\n      15.10\n      C\n      4.0\n      MORTGAGE\n      50000.0\n      Not Verified\n      debt_consolidation\n      14.24\n      1.0\n      65.1\n      9.0\n      2936.24\n      9373.05000\n      2309.29\n      347.15\n      27715.0\n      14900.0\n      156.0\n      82.0\n      55.0\n      55.0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      38736\n      36\n      10.08\n      B\n      7.0\n      MORTGAGE\n      50000.0\n      Not Verified\n      debt_consolidation\n      2.93\n      3.0\n      77.6\n      17.0\n      0.00\n      4848.62000\n      999.22\n      200.02\n      NaN\n      NaN\n      204.0\n      147.0\n      125.0\n      121.0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      1\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n  \n\n373028 rows × 51 columns\n\n\n\n\n# function to calculate WoE and IV of categorical features\n# The function takes 3 arguments: a dataframe (X_train_prepr), a string (column name), and a dataframe (y_train_prepr).\ndef woe_discrete(df, cat_variabe_name, y_df):\n    df = pd.concat([df[cat_variabe_name], y_df], axis=1)\n    df = pd.concat(\n        [\n            df.groupby(df.columns.values[0], as_index=False)[df.columns.values[1]].count(),\n            df.groupby(df.columns.values[0], as_index=False)[df.columns.values[1]].mean(),\n        ],\n        axis=1,\n    )\n    df = df.iloc[:, [0, 1, 3]]\n    df.columns = [df.columns.values[0], \"n_obs\", \"prop_good\"]\n    df[\"prop_n_obs\"] = df[\"n_obs\"] / df[\"n_obs\"].sum()\n    df[\"n_good\"] = df[\"prop_good\"] * df[\"n_obs\"]\n    df[\"n_bad\"] = (1 - df[\"prop_good\"]) * df[\"n_obs\"]\n    df[\"prop_n_good\"] = df[\"n_good\"] / df[\"n_good\"].sum()\n    df[\"prop_n_bad\"] = df[\"n_bad\"] / df[\"n_bad\"].sum()\n    df[\"WoE\"] = np.log(df[\"prop_n_good\"] / df[\"prop_n_bad\"])\n    df = df.sort_values([\"WoE\"])\n    df = df.reset_index(drop=True)\n    df[\"diff_prop_good\"] = df[\"prop_good\"].diff().abs()\n    df[\"diff_WoE\"] = df[\"WoE\"].diff().abs()\n    df[\"IV\"] = (df[\"prop_n_good\"] - df[\"prop_n_bad\"]) * df[\"WoE\"]\n    df[\"IV\"] = df[\"IV\"].sum()\n    return df\n\n\n\"\"\"\nfunction to calculate WoE & IV of continuous variables\nThis is same as the function we defined earlier for discrete variables\nThe only difference are the 2 commented lines of code in the function that results in the df\nbeing sorted by continuous variable values\n\"\"\"\n\n\ndef woe_ordered_continuous(df, continuous_variabe_name, y_df):\n    df = pd.concat([df[continuous_variabe_name], y_df], axis=1)\n    df = pd.concat(\n        [\n            df.groupby(df.columns.values[0], as_index=False)[df.columns.values[1]].count(),\n            df.groupby(df.columns.values[0], as_index=False)[df.columns.values[1]].mean(),\n        ],\n        axis=1,\n    )\n    df = df.iloc[:, [0, 1, 3]]\n    df.columns = [df.columns.values[0], \"n_obs\", \"prop_good\"]\n    df[\"prop_n_obs\"] = df[\"n_obs\"] / df[\"n_obs\"].sum()\n    df[\"n_good\"] = df[\"prop_good\"] * df[\"n_obs\"]\n    df[\"n_bad\"] = (1 - df[\"prop_good\"]) * df[\"n_obs\"]\n    df[\"prop_n_good\"] = df[\"n_good\"] / df[\"n_good\"].sum()\n    df[\"prop_n_bad\"] = df[\"n_bad\"] / df[\"n_bad\"].sum()\n    df[\"WoE\"] = np.log(df[\"prop_n_good\"] / df[\"prop_n_bad\"])\n    # df = df.sort_values(['WoE'])\n    # df = df.reset_index(drop = True)\n    df[\"diff_prop_good\"] = df[\"prop_good\"].diff().abs()\n    df[\"diff_WoE\"] = df[\"WoE\"].diff().abs()\n    df[\"IV\"] = (df[\"prop_n_good\"] - df[\"prop_n_bad\"]) * df[\"WoE\"]\n    df[\"IV\"] = df[\"IV\"].sum()\n    return df\n\n\n# We set the default style of the graphs to the seaborn style.\nsns.set()\n# function to plot WoE value\ndef plot_by_woe(df_WoE, rotation_of_x_axis_labels=0):\n    x = np.array(df_WoE.iloc[:, 0].apply(str))\n    y = df_WoE[\"WoE\"]\n    plt.figure(figsize=(18, 6))\n    plt.plot(x, y, marker=\"o\", linestyle=\"--\", color=\"k\")\n    plt.xlabel(df_WoE.columns[0])\n    plt.ylabel(\"Weight of Evidence\")\n    plt.title(str(\"Weight of Evidence by \" + df_WoE.columns[0]))\n    plt.xticks(rotation=rotation_of_x_axis_labels)\n\n\n# create a list of all the reference categories, i.e. one category from each of the global features\nref_categories = [\n    \"mths_since_last_credit_pull_d:>75\",\n    \"mths_since_issue_d:>122\",\n    \"mths_since_earliest_cr_line:>434\",\n    \"total_rev_hi_lim:>79,780\",\n    \"total_rec_int:>7,260\",\n    \"total_pymnt:>25,000\",\n    \"out_prncp:>15,437\",\n    \"revol_util:>1.0\",\n    \"inq_last_6mths:>4\",\n    \"dti:>35.191\",\n    \"annual_inc:>150K\",\n    \"int_rate:>20.281\",\n    \"term:60\",\n    \"purpose:major_purch__car__home_impr\",\n    \"verification_status:Not Verified\",\n    \"home_ownership:MORTGAGE\",\n    \"grade:G\",\n]\n\n\n# custom transformer class to create new categorical dummy features\nclass WoE_Binning(BaseEstimator, TransformerMixin):\n    def __init__(self, X):  # no *args or *kargs\n        self.X = X\n\n    def fit(self, X, y=None):\n        return self  # nothing else to do\n\n    def transform(self, X):\n        X_new = X.loc[:, \"grade:A\":\"grade:G\"]\n        X_new[\"home_ownership:OWN\"] = X.loc[:, \"home_ownership:OWN\"]\n        X_new[\"home_ownership:MORTGAGE\"] = X.loc[:, \"home_ownership:MORTGAGE\"]\n        X_new[\"home_ownership:OTHER_NONE_RENT\"] = sum(\n            [\n                X[\"home_ownership:OTHER\"],\n                X[\"home_ownership:NONE\"],\n                X[\"home_ownership:RENT\"],\n            ]\n        )\n        X_new = pd.concat(\n            [\n                X_new,\n                X.loc[:, \"verification_status:Not Verified\":\"verification_status:Verified\"],\n            ],\n            axis=1,\n        )\n        X_new[\"purpose:debt_consolidation\"] = X.loc[:, \"purpose:debt_consolidation\"]\n        X_new[\"purpose:credit_card\"] = X.loc[:, \"purpose:credit_card\"]\n        X_new[\"purpose:major_purch__car__home_impr\"] = sum(\n            [\n                X[\"purpose:major_purchase\"],\n                X[\"purpose:car\"],\n                X[\"purpose:home_improvement\"],\n            ]\n        )\n        X_new[\"purpose:educ__ren_en__sm_b__mov\"] = sum(\n            [\n                X[\"purpose:educational\"],\n                X[\"purpose:renewable_energy\"],\n                X[\"purpose:small_business\"],\n                X[\"purpose:moving\"],\n            ]\n        )\n        X_new[\"purpose:vacation__house__wedding__med__oth\"] = sum(\n            [\n                X[\"purpose:vacation\"],\n                X[\"purpose:house\"],\n                X[\"purpose:wedding\"],\n                X[\"purpose:medical\"],\n                X[\"purpose:other\"],\n            ]\n        )\n        X_new[\"term:36\"] = np.where((X[\"term\"] == 36), 1, 0)\n        X_new[\"term:60\"] = np.where((X[\"term\"] == 60), 1, 0)\n        X_new[\"int_rate:<7.071\"] = np.where((X[\"int_rate\"] <= 7.071), 1, 0)\n        X_new[\"int_rate:7.071-10.374\"] = np.where((X[\"int_rate\"] > 7.071) & (X[\"int_rate\"] <= 10.374), 1, 0)\n        X_new[\"int_rate:10.374-13.676\"] = np.where((X[\"int_rate\"] > 10.374) & (X[\"int_rate\"] <= 13.676), 1, 0)\n        X_new[\"int_rate:13.676-15.74\"] = np.where((X[\"int_rate\"] > 13.676) & (X[\"int_rate\"] <= 15.74), 1, 0)\n        X_new[\"int_rate:15.74-20.281\"] = np.where((X[\"int_rate\"] > 15.74) & (X[\"int_rate\"] <= 20.281), 1, 0)\n        X_new[\"int_rate:>20.281\"] = np.where((X[\"int_rate\"] > 20.281), 1, 0)\n        X_new[\"annual_inc:missing\"] = np.where(X[\"annual_inc\"].isnull(), 1, 0)\n        X_new[\"annual_inc:<28,555\"] = np.where((X[\"annual_inc\"] <= 28555), 1, 0)\n        X_new[\"annual_inc:28,555-37,440\"] = np.where((X[\"annual_inc\"] > 28555) & (X[\"annual_inc\"] <= 37440), 1, 0)\n        X_new[\"annual_inc:37,440-61,137\"] = np.where((X[\"annual_inc\"] > 37440) & (X[\"annual_inc\"] <= 61137), 1, 0)\n        X_new[\"annual_inc:61,137-81,872\"] = np.where((X[\"annual_inc\"] > 61137) & (X[\"annual_inc\"] <= 81872), 1, 0)\n        X_new[\"annual_inc:81,872-102,606\"] = np.where((X[\"annual_inc\"] > 81872) & (X[\"annual_inc\"] <= 102606), 1, 0)\n        X_new[\"annual_inc:102,606-120,379\"] = np.where((X[\"annual_inc\"] > 102606) & (X[\"annual_inc\"] <= 120379), 1, 0)\n        X_new[\"annual_inc:120,379-150,000\"] = np.where((X[\"annual_inc\"] > 120379) & (X[\"annual_inc\"] <= 150000), 1, 0)\n        X_new[\"annual_inc:>150K\"] = np.where((X[\"annual_inc\"] > 150000), 1, 0)\n        X_new[\"dti:<=1.6\"] = np.where((X[\"dti\"] <= 1.6), 1, 0)\n        X_new[\"dti:1.6-5.599\"] = np.where((X[\"dti\"] > 1.6) & (X[\"dti\"] <= 5.599), 1, 0)\n        X_new[\"dti:5.599-10.397\"] = np.where((X[\"dti\"] > 5.599) & (X[\"dti\"] <= 10.397), 1, 0)\n        X_new[\"dti:10.397-15.196\"] = np.where((X[\"dti\"] > 10.397) & (X[\"dti\"] <= 15.196), 1, 0)\n        X_new[\"dti:15.196-19.195\"] = np.where((X[\"dti\"] > 15.196) & (X[\"dti\"] <= 19.195), 1, 0)\n        X_new[\"dti:19.195-24.794\"] = np.where((X[\"dti\"] > 19.195) & (X[\"dti\"] <= 24.794), 1, 0)\n        X_new[\"dti:24.794-35.191\"] = np.where((X[\"dti\"] > 24.794) & (X[\"dti\"] <= 35.191), 1, 0)\n        X_new[\"dti:>35.191\"] = np.where((X[\"dti\"] > 35.191), 1, 0)\n        X_new[\"inq_last_6mths:missing\"] = np.where(X[\"inq_last_6mths\"].isnull(), 1, 0)\n        X_new[\"inq_last_6mths:0\"] = np.where((X[\"inq_last_6mths\"] == 0), 1, 0)\n        X_new[\"inq_last_6mths:1-2\"] = np.where((X[\"inq_last_6mths\"] >= 1) & (X[\"inq_last_6mths\"] <= 2), 1, 0)\n        X_new[\"inq_last_6mths:3-4\"] = np.where((X[\"inq_last_6mths\"] >= 3) & (X[\"inq_last_6mths\"] <= 4), 1, 0)\n        X_new[\"inq_last_6mths:>4\"] = np.where((X[\"inq_last_6mths\"] > 4), 1, 0)\n        X_new[\"revol_util:missing\"] = np.where(X[\"revol_util\"].isnull(), 1, 0)\n        X_new[\"revol_util:<0.1\"] = np.where((X[\"revol_util\"] <= 0.1), 1, 0)\n        X_new[\"revol_util:0.1-0.2\"] = np.where((X[\"revol_util\"] > 0.1) & (X[\"revol_util\"] <= 0.2), 1, 0)\n        X_new[\"revol_util:0.2-0.3\"] = np.where((X[\"revol_util\"] > 0.2) & (X[\"revol_util\"] <= 0.3), 1, 0)\n        X_new[\"revol_util:0.3-0.4\"] = np.where((X[\"revol_util\"] > 0.3) & (X[\"revol_util\"] <= 0.4), 1, 0)\n        X_new[\"revol_util:0.4-0.5\"] = np.where((X[\"revol_util\"] > 0.4) & (X[\"revol_util\"] <= 0.5), 1, 0)\n        X_new[\"revol_util:0.5-0.6\"] = np.where((X[\"revol_util\"] > 0.5) & (X[\"revol_util\"] <= 0.6), 1, 0)\n        X_new[\"revol_util:0.6-0.7\"] = np.where((X[\"revol_util\"] > 0.6) & (X[\"revol_util\"] <= 0.7), 1, 0)\n        X_new[\"revol_util:0.7-0.8\"] = np.where((X[\"revol_util\"] > 0.7) & (X[\"revol_util\"] <= 0.8), 1, 0)\n        X_new[\"revol_util:0.8-0.9\"] = np.where((X[\"revol_util\"] > 0.8) & (X[\"revol_util\"] <= 0.9), 1, 0)\n        X_new[\"revol_util:0.9-1.0\"] = np.where((X[\"revol_util\"] > 0.9) & (X[\"revol_util\"] <= 1.0), 1, 0)\n        X_new[\"revol_util:>1.0\"] = np.where((X[\"revol_util\"] > 1.0), 1, 0)\n        X_new[\"out_prncp:<1,286\"] = np.where((X[\"out_prncp\"] <= 1286), 1, 0)\n        X_new[\"out_prncp:1,286-6,432\"] = np.where((X[\"out_prncp\"] > 1286) & (X[\"out_prncp\"] <= 6432), 1, 0)\n        X_new[\"out_prncp:6,432-9,005\"] = np.where((X[\"out_prncp\"] > 6432) & (X[\"out_prncp\"] <= 9005), 1, 0)\n        X_new[\"out_prncp:9,005-10,291\"] = np.where((X[\"out_prncp\"] > 9005) & (X[\"out_prncp\"] <= 10291), 1, 0)\n        X_new[\"out_prncp:10,291-15,437\"] = np.where((X[\"out_prncp\"] > 10291) & (X[\"out_prncp\"] <= 15437), 1, 0)\n        X_new[\"out_prncp:>15,437\"] = np.where((X[\"out_prncp\"] > 15437), 1, 0)\n        X_new[\"total_pymnt:<10,000\"] = np.where((X[\"total_pymnt\"] <= 10000), 1, 0)\n        X_new[\"total_pymnt:10,000-15,000\"] = np.where((X[\"total_pymnt\"] > 10000) & (X[\"total_pymnt\"] <= 15000), 1, 0)\n        X_new[\"total_pymnt:15,000-20,000\"] = np.where((X[\"total_pymnt\"] > 15000) & (X[\"total_pymnt\"] <= 20000), 1, 0)\n        X_new[\"total_pymnt:20,000-25,000\"] = np.where((X[\"total_pymnt\"] > 20000) & (X[\"total_pymnt\"] <= 25000), 1, 0)\n        X_new[\"total_pymnt:>25,000\"] = np.where((X[\"total_pymnt\"] > 25000), 1, 0)\n        X_new[\"total_rec_int:<1,089\"] = np.where((X[\"total_rec_int\"] <= 1089), 1, 0)\n        X_new[\"total_rec_int:1,089-2,541\"] = np.where((X[\"total_rec_int\"] > 1089) & (X[\"total_rec_int\"] <= 2541), 1, 0)\n        X_new[\"total_rec_int:2,541-4,719\"] = np.where((X[\"total_rec_int\"] > 2541) & (X[\"total_rec_int\"] <= 4719), 1, 0)\n        X_new[\"total_rec_int:4,719-7,260\"] = np.where((X[\"total_rec_int\"] > 4719) & (X[\"total_rec_int\"] <= 7260), 1, 0)\n        X_new[\"total_rec_int:>7,260\"] = np.where((X[\"total_rec_int\"] > 7260), 1, 0)\n        X_new[\"total_rev_hi_lim:missing\"] = np.where(X[\"total_rev_hi_lim\"].isnull(), 1, 0)\n        X_new[\"total_rev_hi_lim:<6,381\"] = np.where((X[\"total_rev_hi_lim\"] <= 6381), 1, 0)\n        X_new[\"total_rev_hi_lim:6,381-19,144\"] = np.where(\n            (X[\"total_rev_hi_lim\"] > 6381) & (X[\"total_rev_hi_lim\"] <= 19144), 1, 0\n        )\n        X_new[\"total_rev_hi_lim:19,144-25,525\"] = np.where(\n            (X[\"total_rev_hi_lim\"] > 19144) & (X[\"total_rev_hi_lim\"] <= 25525), 1, 0\n        )\n        X_new[\"total_rev_hi_lim:25,525-35,097\"] = np.where(\n            (X[\"total_rev_hi_lim\"] > 25525) & (X[\"total_rev_hi_lim\"] <= 35097), 1, 0\n        )\n        X_new[\"total_rev_hi_lim:35,097-54,241\"] = np.where(\n            (X[\"total_rev_hi_lim\"] > 35097) & (X[\"total_rev_hi_lim\"] <= 54241), 1, 0\n        )\n        X_new[\"total_rev_hi_lim:54,241-79,780\"] = np.where(\n            (X[\"total_rev_hi_lim\"] > 54241) & (X[\"total_rev_hi_lim\"] <= 79780), 1, 0\n        )\n        X_new[\"total_rev_hi_lim:>79,780\"] = np.where((X[\"total_rev_hi_lim\"] > 79780), 1, 0)\n        X_new[\"mths_since_earliest_cr_line:missing\"] = np.where(X[\"mths_since_earliest_cr_line\"].isnull(), 1, 0)\n        X_new[\"mths_since_earliest_cr_line:<125\"] = np.where((X[\"mths_since_earliest_cr_line\"] <= 125), 1, 0)\n        X_new[\"mths_since_earliest_cr_line:125-167\"] = np.where(\n            (X[\"mths_since_earliest_cr_line\"] > 125) & (X[\"mths_since_earliest_cr_line\"] <= 167),\n            1,\n            0,\n        )\n        X_new[\"mths_since_earliest_cr_line:167-249\"] = np.where(\n            (X[\"mths_since_earliest_cr_line\"] > 167) & (X[\"mths_since_earliest_cr_line\"] <= 249),\n            1,\n            0,\n        )\n        X_new[\"mths_since_earliest_cr_line:249-331\"] = np.where(\n            (X[\"mths_since_earliest_cr_line\"] > 249) & (X[\"mths_since_earliest_cr_line\"] <= 331),\n            1,\n            0,\n        )\n        X_new[\"mths_since_earliest_cr_line:331-434\"] = np.where(\n            (X[\"mths_since_earliest_cr_line\"] > 331) & (X[\"mths_since_earliest_cr_line\"] <= 434),\n            1,\n            0,\n        )\n        X_new[\"mths_since_earliest_cr_line:>434\"] = np.where((X[\"mths_since_earliest_cr_line\"] > 434), 1, 0)\n        X_new[\"mths_since_issue_d:<79\"] = np.where((X[\"mths_since_issue_d\"] <= 79), 1, 0)\n        X_new[\"mths_since_issue_d:79-89\"] = np.where(\n            (X[\"mths_since_issue_d\"] > 79) & (X[\"mths_since_issue_d\"] <= 89), 1, 0\n        )\n        X_new[\"mths_since_issue_d:89-100\"] = np.where(\n            (X[\"mths_since_issue_d\"] > 89) & (X[\"mths_since_issue_d\"] <= 100), 1, 0\n        )\n        X_new[\"mths_since_issue_d:100-122\"] = np.where(\n            (X[\"mths_since_issue_d\"] > 100) & (X[\"mths_since_issue_d\"] <= 122), 1, 0\n        )\n        X_new[\"mths_since_issue_d:>122\"] = np.where((X[\"mths_since_issue_d\"] > 122), 1, 0)\n        X_new[\"mths_since_last_credit_pull_d:missing\"] = np.where(X[\"mths_since_last_credit_pull_d\"].isnull(), 1, 0)\n        X_new[\"mths_since_last_credit_pull_d:<56\"] = np.where((X[\"mths_since_last_credit_pull_d\"] <= 56), 1, 0)\n        X_new[\"mths_since_last_credit_pull_d:56-61\"] = np.where(\n            (X[\"mths_since_last_credit_pull_d\"] > 56) & (X[\"mths_since_last_credit_pull_d\"] <= 61),\n            1,\n            0,\n        )\n        X_new[\"mths_since_last_credit_pull_d:61-75\"] = np.where(\n            (X[\"mths_since_last_credit_pull_d\"] > 61) & (X[\"mths_since_last_credit_pull_d\"] <= 75),\n            1,\n            0,\n        )\n        X_new[\"mths_since_last_credit_pull_d:>75\"] = np.where((X[\"mths_since_last_credit_pull_d\"] > 75), 1, 0)\n        X_new.drop(columns=ref_categories, inplace=True)\n        return X_new\n\n\n# define modeling pipeline\nreg = LogisticRegression(max_iter=1000, class_weight=\"balanced\")\nwoe_transform = WoE_Binning(X)\npipeline = Pipeline(steps=[(\"woe\", woe_transform), (\"model\", reg)])\n\n# define cross-validation criteria\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)\n\n# fit and evaluate the logistic regression pipeline with cross-validation as defined in cv\nscores = cross_val_score(pipeline, X_train, y_train, scoring=\"roc_auc\", cv=cv)\nAUROC = np.mean(scores)\nGINI = AUROC * 2 - 1\n\n# print the mean AUROC score and Gini\nprint(\"Mean AUROC: %.4f\" % (AUROC))\nprint(\"Gini: %.4f\" % (GINI))\n\n# fit the pipeline on the whole training set\npipeline.fit(X_train, y_train)\n\n# create a summary table\n# first create a transformed training set through our WoE_Binning custom class\nX_train_woe_transformed = woe_transform.fit_transform(X_train)\n# Store the column names in X_train as a list\nfeature_name = X_train_woe_transformed.columns.values\n# Create a summary table of our logistic regression model\nsummary_table = pd.DataFrame(columns=[\"Feature name\"], data=feature_name)\n# Create a new column in the dataframe, called 'Coefficients'\nsummary_table[\"Coefficients\"] = np.transpose(pipeline[\"model\"].coef_)\n# Increase the index of every row of the dataframe with 1 to store our model intercept in 1st row\nsummary_table.index = summary_table.index + 1\n# Assign our model intercept to this new row\nsummary_table.loc[0] = [\"Intercept\", pipeline[\"model\"].intercept_[0]]\n# Sort the dataframe by index\nsummary_table.sort_index(inplace=True)\n\nMean AUROC: 0.8658\nGini: 0.7316\n\n\n\n# make preditions on our test set\ny_hat_test = pipeline.predict(X_test)\n# get the predicted probabilities\ny_hat_test_proba = pipeline.predict_proba(X_test)\n# select the probabilities of only the positive class (class 1 - default)\ny_hat_test_proba = y_hat_test_proba[:][:, 1]\n\n# we will now create a new DF with actual classes and the predicted probabilities\n# create a temp y_test DF to reset its index to allow proper concaternation with y_hat_test_proba\ny_test_temp = y_test.copy()\ny_test_temp.reset_index(drop=True, inplace=True)\ny_test_proba = pd.concat([y_test_temp, pd.DataFrame(y_hat_test_proba)], axis=1)\n# Rename the columns\ny_test_proba.columns = [\"y_test_class_actual\", \"y_hat_test_proba\"]\n# Makes the index of one dataframe equal to the index of another dataframe.\ny_test_proba.index = X_test.index\n\n# get the values required to plot a ROC curve\nfpr, tpr, thresholds = roc_curve(y_test_proba[\"y_test_class_actual\"], y_test_proba[\"y_hat_test_proba\"])\n\n\n# plot the ROC curve\nplt.plot(fpr, tpr)\n# plot a secondary diagonal line, with dashed line style and black color to represent a no-skill classifier\nplt.plot(fpr, fpr, linestyle=\"--\", color=\"k\")\nplt.xlabel(\"False positive rate\")\nplt.ylabel(\"True positive rate\")\nplt.title(\"ROC curve\");\n\n\n\n\n\n# Calculate the Area Under the Receiver Operating Characteristic Curve (AUROC) on our test set\nAUROC = roc_auc_score(y_test_proba[\"y_test_class_actual\"], y_test_proba[\"y_hat_test_proba\"])\n# calculate Gini from AUROC\nGini = AUROC * 2 - 1\n# print AUROC and Gini\nprint(\"AUROC: %.4f\" % (AUROC))\nprint(\"Gini: %.4f\" % (Gini))\n\nAUROC: 0.8662\nGini: 0.7323\n\n\n\n# draw a PR curve\n# calculate the no skill line as the proportion of the positive class\nno_skill = len(y_test[y_test == 1]) / len(y)\n# plot the no skill precision-recall curve\nplt.plot([0, 1], [no_skill, no_skill], linestyle=\"--\", label=\"No Skill\")\n# get the values required to plot a PR curve\nprecision, recall, thresholds = precision_recall_curve(\n    y_test_proba[\"y_test_class_actual\"], y_test_proba[\"y_hat_test_proba\"]\n)\n# plot PR curve\nplt.plot(recall, precision, marker=\".\", label=\"Logistic\")\nplt.xlabel(\"Recall\")\nplt.ylabel(\"Precision\")\nplt.legend()\nplt.title(\"PR curve\");\n\n\n\n\n\n# create a new dataframe with one column with values from the 'reference_categories' list\ndf_ref_categories = pd.DataFrame(ref_categories, columns=[\"Feature name\"])\n# We create a second column, called 'Coefficients', which contains only 0 values.\ndf_ref_categories[\"Coefficients\"] = 0\n\n# Concatenates two dataframes\ndf_scorecard = pd.concat([summary_table, df_ref_categories])\n# reset the index\ndf_scorecard.reset_index(inplace=True)\n\n# create a new column, called 'Original feature name', which contains the value of the 'Feature name' column\ndf_scorecard[\"Original feature name\"] = df_scorecard[\"Feature name\"].str.split(\":\").str[0]\n\n# Define the min and max threshholds for our scorecard\nmin_score = 300\nmax_score = 850\n\n# calculate the sum of the minimum coefficients of each category within the original feature name\nmin_sum_coef = df_scorecard.groupby(\"Original feature name\")[\"Coefficients\"].min().sum()\n# calculate the sum of the maximum coefficients of each category within the original feature name\nmax_sum_coef = df_scorecard.groupby(\"Original feature name\")[\"Coefficients\"].max().sum()\n# create a new column that has the imputed calculated Score based scaled from the coefficients\ndf_scorecard[\"Score - Calculation\"] = (\n    df_scorecard[\"Coefficients\"] * (max_score - min_score) / (max_sum_coef - min_sum_coef)\n)\n# update the calculated score of the Intercept\ndf_scorecard.loc[0, \"Score - Calculation\"] = (\n    (df_scorecard.loc[0, \"Coefficients\"] - min_sum_coef) / (max_sum_coef - min_sum_coef)\n) * (max_score - min_score) + min_score\n# round the values of the 'Score - Calculation' column and store them in a new column\ndf_scorecard[\"Score - Preliminary\"] = df_scorecard[\"Score - Calculation\"].round()\n\n# check the min and max possible scores of our scorecard\nmin_sum_score_prel = df_scorecard.groupby(\"Original feature name\")[\"Score - Preliminary\"].min().sum()\nmax_sum_score_prel = df_scorecard.groupby(\"Original feature name\")[\"Score - Preliminary\"].max().sum()\nprint(min_sum_score_prel)\nprint(max_sum_score_prel)\n\n# so both our min and max scores are out by +1. we need to manually adjust this\n# Which one? We'll evaluate based on the rounding differences of the minimum category within each Original Feature Name.\npd.options.display.max_rows = 102\ndf_scorecard[\"Difference\"] = df_scorecard[\"Score - Preliminary\"] - df_scorecard[\"Score - Calculation\"]\n\n# look like we can get by deducting 1 from the Intercept\ndf_scorecard[\"Score - Final\"] = df_scorecard[\"Score - Preliminary\"]\ndf_scorecard.loc[0, \"Score - Final\"] = 598\n\n# Recheck min and max possible scores\nprint(df_scorecard.groupby(\"Original feature name\")[\"Score - Final\"].min().sum())\nprint(df_scorecard.groupby(\"Original feature name\")[\"Score - Final\"].max().sum())\n\n# calculate credit scores for test set\n# first create a transformed test set through our WoE_Binning custom class\nX_test_woe_transformed = woe_transform.fit_transform(X_test)\n# insert an Intercept column in its beginning to align with the # of rows in scorecard\nX_test_woe_transformed.insert(0, \"Intercept\", 1)\n\n# get the list of our final scorecard scores\nscorecard_scores = df_scorecard[\"Score - Final\"]\n# check the shapes of test set and scorecard before doing matrix dot multiplication\nprint(X_test_woe_transformed.shape)\nprint(scorecard_scores.shape)\n\n# we can see that the test set has 17 less columns than the rows in scorecard due to the reference categories\n# since the reference categories will always be scored as 0 based on the scorecard,\n# it is safe to add these categories to the end of test set with 0 values\nX_test_woe_transformed = pd.concat(\n    [\n        X_test_woe_transformed,\n        pd.DataFrame(\n            dict.fromkeys(ref_categories, [0] * len(X_test_woe_transformed)), index=X_test_woe_transformed.index\n        ),\n    ],\n    axis=1,\n)\n# Need to reshape scorecard_scores so that it is (102,1) to allow for matrix dot multiplication\nscorecard_scores = scorecard_scores.values.reshape(102, 1)\nprint(X_test_woe_transformed.shape)\nprint(scorecard_scores.shape)\n\n# matrix dot multiplication of test set with scorecard scores\ny_scores = X_test_woe_transformed.dot(scorecard_scores)\n\n# Score cutoff for loan approvals\n# Calculate Youden's J-Statistic to identify the best threshhold\nJ = tpr - fpr\n# locate the index of the largest J\nix = np.argmax(J)\nbest_thresh = thresholds[ix]\nprint(\"Best Threshold: %f\" % (best_thresh))\n\n# create a new DF comprising of the thresholds from the ROC output\ndf_cutoffs = pd.DataFrame(thresholds, columns=[\"thresholds\"])\n# calcue Score corresponding to each threshold\ndf_cutoffs[\"Score\"] = (\n    (np.log(df_cutoffs[\"thresholds\"] / (1 - df_cutoffs[\"thresholds\"])) - min_sum_coef)\n    * ((max_score - min_score) / (max_sum_coef - min_sum_coef))\n    + min_score\n).round()\n\n# define a function called 'n_approved' which assigns a value of 1 if a predicted probability\n# is greater than the parameter p, which is a threshold, and a value of 0, if it is not.\n# Then it sums the column.\n# Thus, for given any percentage values, the function will return\n# the number of rows wih estimated probabilites greater than the threshold.\ndef n_approved(p):\n    return np.where(y_test_proba[\"y_hat_test_proba\"] >= p, 1, 0).sum()\n\n\n# Assuming that all credit applications above a given probability of being 'good' will be approved,\n# when we apply the 'n_approved' function to a threshold, it will return the number of approved applications.\n# Thus, here we calculate the number of approved appliations for al thresholds.\ndf_cutoffs[\"N Approved\"] = df_cutoffs[\"thresholds\"].apply(n_approved)\n# Then, we calculate the number of rejected applications for each threshold.\n# It is the difference between the total number of applications and the approved applications for that threshold.\ndf_cutoffs[\"N Rejected\"] = y_test_proba[\"y_hat_test_proba\"].shape[0] - df_cutoffs[\"N Approved\"]\n# Approval rate equalts the ratio of the approved applications and all applications.\ndf_cutoffs[\"Approval Rate\"] = df_cutoffs[\"N Approved\"] / y_test_proba[\"y_hat_test_proba\"].shape[0]\n# Rejection rate equals one minus approval rate.\ndf_cutoffs[\"Rejection Rate\"] = 1 - df_cutoffs[\"Approval Rate\"]\n\n# let's have a look at the approval and rejection rates at our ideal threshold\ndf_cutoffs[df_cutoffs[\"thresholds\"].between(0.18657, 0.18658)]\n\n300.0\n850.0\n300.0\n850.0\n(93257, 85)\n(102,)\n(93257, 102)\n(102, 1)\nBest Threshold: 0.186736\n\n\n\n\n\n\n  \n    \n      \n      thresholds\n      Score\n      N Approved\n      N Rejected\n      Approval Rate\n      Rejection Rate\n    \n  \n  \n    \n      6687\n      0.186571\n      488.0\n      86383\n      6874\n      0.92629\n      0.07371"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "loans-modelling",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "loans-modelling",
    "section": "Install",
    "text": "Install\npip install loans_modelling"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "loans-modelling",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1 + 1\n\n2"
  }
]